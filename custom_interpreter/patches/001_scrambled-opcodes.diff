--- Python-2.7.9/Include/opcode.h	2014-12-10 13:59:32.000000000 -0200
+++ Python-2.7.9-customized/Include/opcode.h	2015-02-09 16:36:50.748148442 -0200
@@ -7,148 +7,148 @@
 
 /* Instruction opcodes for compiled code */
 
-#define STOP_CODE	0
-#define POP_TOP		1
-#define ROT_TWO		2
-#define ROT_THREE	3
-#define DUP_TOP		4
-#define ROT_FOUR	5
-#define NOP		9
-
-#define UNARY_POSITIVE	10
-#define UNARY_NEGATIVE	11
-#define UNARY_NOT	12
-#define UNARY_CONVERT	13
-
-#define UNARY_INVERT	15
-
-#define BINARY_POWER	19
-
-#define BINARY_MULTIPLY	20
-#define BINARY_DIVIDE	21
-#define BINARY_MODULO	22
-#define BINARY_ADD	23
-#define BINARY_SUBTRACT	24
-#define BINARY_SUBSCR	25
-#define BINARY_FLOOR_DIVIDE 26
-#define BINARY_TRUE_DIVIDE 27
-#define INPLACE_FLOOR_DIVIDE 28
-#define INPLACE_TRUE_DIVIDE 29
+#define STOP_CODE 91
+#define POP_TOP 38
+#define ROT_TWO 100
+#define ROT_THREE 1
+#define DUP_TOP 19
+#define ROT_FOUR 75
+#define NOP 9
+
+#define UNARY_POSITIVE 73
+#define UNARY_NEGATIVE 12
+#define UNARY_NOT 11
+#define UNARY_CONVERT 98
+
+#define UNARY_INVERT 5
+
+#define BINARY_POWER 66
+
+#define BINARY_MULTIPLY 74
+#define BINARY_DIVIDE 82
+#define BINARY_MODULO 25
+#define BINARY_ADD 86
+#define BINARY_SUBTRACT 80
+#define BINARY_SUBSCR 81
+#define BINARY_FLOOR_DIVIDE 62
+#define BINARY_TRUE_DIVIDE 87
+#define INPLACE_FLOOR_DIVIDE 0
+#define INPLACE_TRUE_DIVIDE 101
 
-#define SLICE		30
+#define SLICE 33
 /* Also uses 31-33 */
 
-#define STORE_SLICE	40
+#define STORE_SLICE 93
 /* Also uses 41-43 */
 
-#define DELETE_SLICE	50
+#define DELETE_SLICE 27
 /* Also uses 51-53 */
 
-#define STORE_MAP	54
-#define INPLACE_ADD	55
-#define INPLACE_SUBTRACT	56
-#define INPLACE_MULTIPLY	57
-#define INPLACE_DIVIDE	58
-#define INPLACE_MODULO	59
-#define STORE_SUBSCR	60
-#define DELETE_SUBSCR	61
-
-#define BINARY_LSHIFT	62
-#define BINARY_RSHIFT	63
-#define BINARY_AND	64
-#define BINARY_XOR	65
-#define BINARY_OR	66
-#define INPLACE_POWER	67
-#define GET_ITER	68
-
-#define PRINT_EXPR	70
-#define PRINT_ITEM	71
-#define PRINT_NEWLINE	72
-#define PRINT_ITEM_TO   73
-#define PRINT_NEWLINE_TO 74
-#define INPLACE_LSHIFT	75
-#define INPLACE_RSHIFT	76
-#define INPLACE_AND	77
-#define INPLACE_XOR	78
-#define INPLACE_OR	79
-#define BREAK_LOOP	80
-#define WITH_CLEANUP    81
-#define LOAD_LOCALS	82
-#define RETURN_VALUE	83
-#define IMPORT_STAR	84
-#define EXEC_STMT	85
-#define YIELD_VALUE	86
-#define POP_BLOCK	87
-#define END_FINALLY	88
-#define BUILD_CLASS	89
-
-#define HAVE_ARGUMENT	90	/* Opcodes from here have an argument: */
-
-#define STORE_NAME	90	/* Index in name list */
-#define DELETE_NAME	91	/* "" */
-#define UNPACK_SEQUENCE	92	/* Number of sequence items */
-#define FOR_ITER	93
-#define LIST_APPEND	94
-
-#define STORE_ATTR	95	/* Index in name list */
-#define DELETE_ATTR	96	/* "" */
-#define STORE_GLOBAL	97	/* "" */
-#define DELETE_GLOBAL	98	/* "" */
-#define DUP_TOPX	99	/* number of items to duplicate */
-#define LOAD_CONST	100	/* Index in const list */
-#define LOAD_NAME	101	/* Index in name list */
-#define BUILD_TUPLE	102	/* Number of tuple items */
-#define BUILD_LIST	103	/* Number of list items */
-#define BUILD_SET	104     /* Number of set items */
-#define BUILD_MAP	105	/* Always zero for now */
-#define LOAD_ATTR	106	/* Index in name list */
-#define COMPARE_OP	107	/* Comparison operator */
-#define IMPORT_NAME	108	/* Index in name list */
-#define IMPORT_FROM	109	/* Index in name list */
-#define JUMP_FORWARD	110	/* Number of bytes to skip */
+#define STORE_MAP 26
+#define INPLACE_ADD 24
+#define INPLACE_SUBTRACT 63
+#define INPLACE_MULTIPLY 89
+#define INPLACE_DIVIDE 90
+#define INPLACE_MODULO 2
+#define STORE_SUBSCR 71
+#define DELETE_SUBSCR 92
+
+#define BINARY_LSHIFT 76
+#define BINARY_RSHIFT 83
+#define BINARY_AND 13
+#define BINARY_XOR 78
+#define BINARY_OR 3
+#define INPLACE_POWER 79
+#define GET_ITER 58
+
+#define PRINT_EXPR 68
+#define PRINT_ITEM 99
+#define PRINT_NEWLINE 4
+#define PRINT_ITEM_TO 88
+#define PRINT_NEWLINE_TO 69
+#define INPLACE_LSHIFT 21
+#define INPLACE_RSHIFT 67
+#define INPLACE_AND 64
+#define INPLACE_XOR 20
+#define INPLACE_OR 23
+#define BREAK_LOOP 48
+#define WITH_CLEANUP 22
+#define LOAD_LOCALS 72
+#define RETURN_VALUE 32
+#define IMPORT_STAR 10
+#define EXEC_STMT 65
+#define YIELD_VALUE 85
+#define POP_BLOCK 84
+#define END_FINALLY 15
+#define BUILD_CLASS 70
+
+#define HAVE_ARGUMENT 102	/* Opcodes from here have an argument: */
+
+#define STORE_NAME 107	/* Index in name list */
+#define DELETE_NAME 119	/* "" */
+#define UNPACK_SEQUENCE 144	/* Number of sequence items */
+#define FOR_ITER 127
+#define LIST_APPEND 126
+
+#define STORE_ATTR 122	/* Index in name list */
+#define DELETE_ATTR 103	/* "" */
+#define STORE_GLOBAL 142	/* "" */
+#define DELETE_GLOBAL 105	/* "" */
+#define DUP_TOPX 108	/* number of items to duplicate */
+#define LOAD_CONST 159	/* Index in const list */
+#define LOAD_NAME 125	/* Index in name list */
+#define BUILD_TUPLE 153	/* Number of tuple items */
+#define BUILD_LIST 102	/* Number of list items */
+#define BUILD_SET 133     /* Number of set items */
+#define BUILD_MAP 123	/* Always zero for now */
+#define LOAD_ATTR 128	/* Index in name list */
+#define COMPARE_OP 120	/* Comparison operator */
+#define IMPORT_NAME 148	/* Index in name list */
+#define IMPORT_FROM 115	/* Index in name list */
+#define JUMP_FORWARD 117	/* Number of bytes to skip */
 
-#define JUMP_IF_FALSE_OR_POP 111 /* Target byte offset from beginning
+#define JUMP_IF_FALSE_OR_POP 106 /* Target byte offset from beginning
                                     of code */
-#define JUMP_IF_TRUE_OR_POP 112	/* "" */
-#define JUMP_ABSOLUTE	113	/* "" */
-#define POP_JUMP_IF_FALSE 114	/* "" */
-#define POP_JUMP_IF_TRUE 115	/* "" */
-
-#define LOAD_GLOBAL	116	/* Index in name list */
-
-#define CONTINUE_LOOP	119	/* Start of loop (absolute) */
-#define SETUP_LOOP	120	/* Target address (relative) */
-#define SETUP_EXCEPT	121	/* "" */
-#define SETUP_FINALLY	122	/* "" */
-
-#define LOAD_FAST	124	/* Local variable number */
-#define STORE_FAST	125	/* Local variable number */
-#define DELETE_FAST	126	/* Local variable number */
+#define JUMP_IF_TRUE_OR_POP 152	/* "" */
+#define JUMP_ABSOLUTE 137	/* "" */
+#define POP_JUMP_IF_FALSE 147	/* "" */
+#define POP_JUMP_IF_TRUE 136	/* "" */
+
+#define LOAD_GLOBAL 146	/* Index in name list */
+
+#define CONTINUE_LOOP 116	/* Start of loop (absolute) */
+#define SETUP_LOOP 157	/* Target address (relative) */
+#define SETUP_EXCEPT 118	/* "" */
+#define SETUP_FINALLY 109	/* "" */
+
+#define LOAD_FAST 124	/* Local variable number */
+#define STORE_FAST 155	/* Local variable number */
+#define DELETE_FAST 145	/* Local variable number */
 
-#define RAISE_VARARGS	130	/* Number of raise arguments (1, 2 or 3) */
+#define RAISE_VARARGS 131	/* Number of raise arguments (1, 2 or 3) */
 /* CALL_FUNCTION_XXX opcodes defined below depend on this definition */
-#define CALL_FUNCTION	131	/* #args + (#kwargs<<8) */
-#define MAKE_FUNCTION	132	/* #defaults */
-#define BUILD_SLICE 	133	/* Number of items */
-
-#define MAKE_CLOSURE    134     /* #free vars */
-#define LOAD_CLOSURE    135     /* Load free variable from closure */
-#define LOAD_DEREF      136     /* Load and dereference from closure cell */ 
-#define STORE_DEREF     137     /* Store into cell */ 
+#define CALL_FUNCTION 154	/* #args + (#kwargs<<8) */
+#define MAKE_FUNCTION 149	/* #defaults */
+#define BUILD_SLICE 114	/* Number of items */
+
+#define MAKE_CLOSURE 113     /* #free vars */
+#define LOAD_CLOSURE 132     /* Load free variable from closure */
+#define LOAD_DEREF 138     /* Load and dereference from closure cell */ 
+#define STORE_DEREF 112     /* Store into cell */ 
 
 /* The next 3 opcodes must be contiguous and satisfy
    (CALL_FUNCTION_VAR - CALL_FUNCTION) & 3 == 1  */
-#define CALL_FUNCTION_VAR          140	/* #args + (#kwargs<<8) */
-#define CALL_FUNCTION_KW           141	/* #args + (#kwargs<<8) */
-#define CALL_FUNCTION_VAR_KW       142	/* #args + (#kwargs<<8) */
+#define CALL_FUNCTION_VAR 163	/* #args + (#kwargs<<8) */
+#define CALL_FUNCTION_KW 164	/* #args + (#kwargs<<8) */
+#define CALL_FUNCTION_VAR_KW 165	/* #args + (#kwargs<<8) */
 
-#define SETUP_WITH 143
+#define SETUP_WITH 111
 
 /* Support for opargs more than 16 bits long */
-#define EXTENDED_ARG  145
+#define EXTENDED_ARG 143
 
-#define SET_ADD         146
-#define MAP_ADD         147
+#define SET_ADD 110
+#define MAP_ADD 104
 
 
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
